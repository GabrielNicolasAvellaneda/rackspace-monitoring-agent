#!/usr/bin/env python
"""
From <https://github.com/joyent/node/blob/master/configure-gyp>
"""

import optparse
import os
import json
import sys

root_dir = os.path.dirname(__file__)

# parse our options
parser = optparse.OptionParser()

parser.add_option("--debug",
    action="store_true",
    dest="debug",
    help="Build debug build")

parser.add_option("--prefix",
    action="store",
    dest="prefix",
    help="Select the install prefix (defaults to /usr/local)")

(options, args) = parser.parse_args()


def pkg_config(pkg):
  cmd = os.popen('pkg-config --libs %s' % pkg, 'r')
  libs = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  cmd = os.popen('pkg-config --cflags %s' % pkg, 'r')
  cflags = cmd.readline().strip()
  ret = cmd.close()
  if (ret): return None

  return (libs, cflags)


def uname(switch):
  f = os.popen('uname %s' % switch)
  s = f.read().strip()
  f.close()
  return s


def host_arch():
  """Host architecture. One of arm, ia32 or x64."""
  arch = uname('-p')

  if arch == 'unknown':
    arch = uname('-m')

  return {
    'arm': 'arm',
    'x86': 'ia32',
    'i386': 'ia32',
    'x86_64': 'x64',
  }.get(arch, 'ia32')


def target_arch():
  # TODO act on options.dest_cpu
  return host_arch()


def configure_virgo(o):
  # TODO add gdb and dest_cpu
  o['variables']['virgo_debug'] = 'true' if options.debug else 'false'
  o['variables']['virgo_prefix'] = options.prefix if options.prefix else ''
  o['variables']['host_arch'] = host_arch()
  o['variables']['target_arch'] = target_arch()

print "configure options:", options

output = {
  'variables': {},
  'include_dirs': [],
  'libraries': [],
  'defines': [],
  'cflags': [],
}

configure_virgo(output)

# variables should be a root level element,
# move everything else to target_defaults
variables = output['variables']
del output['variables']
output = {
  'variables': variables,
  'target_defaults': output
}

fn = os.path.join(root_dir, 'options.gypi')
print "creating ", fn

f = open(fn, 'w+')
f.write("# Do not edit. Generated by the configure script.\n")
json.dump(output, f, indent=2, skipkeys=True)
f.write("\n")
f.close()

print "Generating build system with GYP..."

if sys.platform == "win32":
    os.system("python tools\gyp_virgo -f msvs -G msvs_version=2010")
else:
    os.system("tools/gyp_virgo")

print ""
print "Done!"
print ""
if sys.platform == "win32":
    print "Now run `python build.py` to build!"
else:
    print "Now run `make` to build!"
print ""

